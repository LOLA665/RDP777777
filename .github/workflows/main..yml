name: Persistent Windows Server 2025 RDP + Tailscale 72h

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-2025
    timeout-minutes: 4320  # 72h

    steps:
      - name: Enable RDP + Firewall
        shell: pwsh
        run: |
          Write-Host "`e[33müîß Configuring RDP...`e[0m"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' -ErrorAction SilentlyContinue
          Restart-Service -Name TermService -Force
          Write-Host "`e[32m‚úÖ RDP Enabled`e[0m"

      - name: Reset runneradmin password
        shell: pwsh
        run: |
          Write-Host "`e[33müë§ Resetting runneradmin password...`e[0m"
          function GenPass { -join ((33..126) | Get-Random -Count 14 | % {[char]$_}) }
          $newPass = GenPass
          $secure = ConvertTo-SecureString $newPass -AsPlainText -Force
          try {
            Set-LocalUser -Name "runneradmin" -Password $secure
            Write-Output "RUNNERADMIN_PASS=$newPass" >> $env:GITHUB_ENV
            Write-Host "`e[32m‚úÖ runneradmin password reset`e[0m"
          } catch {
            Write-Host "`e[31m‚ùå Could not reset runneradmin password: $_`e[0m"
          }

      - name: Install Tailscale
        shell: pwsh
        run: |
          Write-Host "`e[33müåê Installing Tailscale...`e[0m"
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i `"$installer`" /quiet /norestart" -Wait
          Remove-Item $installer -Force
          Write-Host "`e[32m‚úÖ Tailscale installed`e[0m"

      - name: Start Tailscale with Auth Key
        shell: pwsh
        run: |
          $authKey = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          $host = "gh-server-$env:GITHUB_RUN_ID"
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$host --accept-routes --accept-dns
            Start-Sleep -Seconds 5
            $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Write-Output "TAILSCALE_IP=$ip" >> $env:GITHUB_ENV
            Write-Host "`e[32m‚úÖ Tailscale started with IP: $ip`e[0m"
          } else {
            Write-Host "`e[31m‚ùå Tailscale not installed!`e[0m"
          }

      - name: Create boot re-enable script (RDP + Tailscale)
        shell: pwsh
        run: |
          $scriptPath = "C:\re_enable_rdp_tailscale.ps1"
          $authKey = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          $host = "gh-server-$env:GITHUB_RUN_ID"

          $content = @"
Try {
  Add-Content -Path C:\rdp_status.log -Value "[BOOT] Re-enable script running"

  # Enable RDP
  Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
  Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' -ErrorAction SilentlyContinue
  Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue
  Add-Content -Path C:\rdp_status.log -Value "[BOOT] RDP re-enabled"

  # Start Tailscale
  if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
    & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$host --accept-routes --accept-dns
    Start-Sleep -Seconds 5
    try {
      $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
      Add-Content -Path C:\rdp_status.log -Value "[BOOT] Tailscale IP: $ip"
    } catch {}
  }

} catch {
  Add-Content -Path C:\rdp_status.log -Value "[BOOT ERROR] $_"
}
"@

          $content | Out-File -FilePath $scriptPath -Encoding UTF8 -Force
          schtasks /Create /TN "ReEnableRDP_Tailscale" /TR "powershell.exe -ExecutionPolicy Bypass -File `"$scriptPath`"" /SC ONSTART /RL HIGHEST /F
          Write-Host "`e[32m‚úÖ Boot script + scheduled task created`e[0m"

      - name: Show access info
        shell: pwsh
        run: |
          $runnerPass = $env:RUNNERADMIN_PASS
          $ip = $env:TAILSCALE_IP
          Write-Host "=== üîë ACCESS INFO ==="
          Write-Host "User: runneradmin"
          Write-Host "Pass: $runnerPass"
          Write-Host "Tailscale IP: $ip"
          Write-Host "======================"

      - name: Keep RDP alive 72h
        shell: pwsh
        run: |
          Write-Host "`e[33m‚è± Keep-alive loop started (72h)...`e[0m"
          $endTime = (Get-Date).AddHours(72)
          while ((Get-Date) -lt $endTime) {

            # Check RDP
            $rdpStatus = (Get-Service TermService).Status
            if ($rdpStatus -ne "Running") {
              Write-Host "`e[33m‚ö†Ô∏è RDP not running, restarting...`e[0m"
              Start-Service TermService
            } else {
              Write-Host "`e[32m‚úÖ RDP running`e[0m"
            }

            # Check Tailscale
            if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
              try {
                $ip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                if ([string]::IsNullOrEmpty($ip)) {
                  Write-Host "`e[33m‚ö†Ô∏è Tailscale not connected, reconnecting...`e[0m"
                  & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="${{ secrets.TAILSCALE_AUTH_KEY }}" --hostname="gh-server-$env:GITHUB_RUN_ID" --accept-routes --accept-dns
                } else {
                  Write-Host "`e[32müåê Tailscale IP: $ip`e[0m"
                }
              } catch {
                Write-Host "`e[31m‚ùå Tailscale check failed: $_`e[0m"
              }
            }

            Start-Sleep -Seconds 30
          }
          
