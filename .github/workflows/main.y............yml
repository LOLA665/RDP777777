name: RDP Gaming Server Windows (GPU Tesla T4 Virtualizat)

on:
  workflow_dispatch:

jobs:
  rdp-gaming:
    runs-on: gpu-t4-4-core
    timeout-minutes: 4320

    steps:
      - name: Afișează informații despre GPU Tesla T4 virtualizat
        shell: pwsh
        run: |
          Write-Host "=== GPU Tesla T4 virtualizat detectat în runner ==="
          try {
            $gpuInfo = Get-WmiObject Win32_VideoController
            if ($gpuInfo) {
              Write-Host "GPU detectat:"
              $gpuInfo | Format-Table Name, DriverVersion, VideoProcessor
            } else {
              Write-Host "GPU nu a fost detectat."
            }
          } catch {
            Write-Host "Eroare la accesarea GPU."
          }
          Write-Host "Acesta este un GPU Tesla T4 virtualizat cu performanțe reale."

      - name: Activează Remote Desktop
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Resetare și exportare parolă reală pentru user runneradmin
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          function GenPass { -join ((33..126) | Get-Random -Count 16 | % {[char]$_}) }
          $user = "runneradmin"

          $existingUser = Get-LocalUser -Name $user -ErrorAction SilentlyContinue

          if (-not $existingUser) {
            Write-Host "User '$user' nu există pe sistem. Nu vom modifica nimic."
            exit 0
          }

          $newPass = GenPass
          $secure = ConvertTo-SecureString $newPass -AsPlainText -Force

          try {
            Set-LocalUser -Name $user -Password $secure -ErrorAction Stop
            Write-Host "Parola pentru '$user' a fost resetată cu succes."
            Write-Output "RUNNERADMIN_USER=$user" >> $env:GITHUB_ENV
            Write-Output "RUNNERADMIN_PASS=$newPass" >> $env:GITHUB_ENV
          } catch {
            Write-Host "Eroare la resetarea parolei pentru '$user': $_"
            exit 1
          }

      - name: Instalează și configurează Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-server-$env:GITHUB_RUN_ID

      - name: Afișează date de acces (user, parolă, IP)
        shell: pwsh
        run: |
          $runnerUser = $env:RUNNERADMIN_USER
          $runnerPass = $env:RUNNERADMIN_PASS
          $mscUser = $env:MSC_USER
          $mscPass = $env:MSC_PASS

          if (-not $mscUser -or $mscUser.Trim() -eq "") {
            $lu = Get-LocalUser -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*MSC*" } | Select-Object -First 1
            if ($lu) { $mscUser = $lu.Name }
          }

          $tsIp = ""
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
            try { $tsIp = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4; $tsIp = $tsIp.Trim() } catch {}
          }

          Write-Host "=== INFORMAȚII ACCES RDP ==="
          if ($mscUser) {
            if ($mscPass) {
              Write-Host "User local: $mscUser / Parola: $mscPass"
            } else {
              Write-Host "User local: $mscUser / Parola: (necunoscută sau neschimbată)"
            }
          } else {
            Write-Host "User local (MSC) : NU a fost găsit în mediu."
          }
          if ($runnerUser) {
            Write-Host "User runneradmin: $runnerUser / Parola: $runnerPass"
          } else {
            Write-Host "User runneradmin: NU a fost exportat."
          }
          if ($tsIp) { Write-Host "IP Tailscale: $tsIp" } else { Write-Host "IP Tailscale: (nevalabil)" }
          Write-Host "GPU Tesla T4 Virtualizat, performanță reală."
          Write-Host "=========================="

      - name: Menține conexiunea (ping la 10 min) - loop fix
        shell: pwsh
        run: |
          for ($i = 0; $i -lt 432; $i++) {
            Write-Host ("Maintaining Connection... Iteration {0} / 432 - {1}" -f $i, (Get-Date))
            Start-Sleep -Seconds 600
          }
          
